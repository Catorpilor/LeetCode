package tree

import (
	"fmt"
	"math"

	"github.com/catorpilor/leetcode/utils"
)

func mctFromLeafValues(arr []int) int {
	return useDP(arr)
}

// useDP use top-down approach with time complexity O(N^3), space complexity O(N)
func useDP(arr []int) int {
	// res[i][j] means the min leaf values generated by nodes [i,j]
	set := make(map[string]int)
	return helper(arr, 0, len(arr)-1, set)
}

func helper(arr []int, l, r int, set map[string]int) int {
	key := fmt.Sprintf("%d-%d", l, r)
	if v, exists := set[key]; exists {
		return v
	}
	if l >= r {
		return 0
	}
	res := math.MaxInt32
	for i := l; i < r; i++ {
		root := max(arr[l:i+1]) * max(arr[i+1:r+1])
		res = utils.Min(res, root+helper(arr, l, i, set)+helper(arr, i+1, r, set))
	}
	set[key] = res
	return res
}

func max(arr []int) int {
	n := len(arr)
	if n < 1 {
		return 0
	}
	ans := arr[0]
	for i := 1; i < n; i++ {
		if arr[i] > ans {
			ans = arr[i]
		}
	}
	return ans
}
