* [1;33m3d468f8[m[1;33m ([m[1;36mHEAD -> [m[1;32mmaster[m[1;33m, [m[1;31morigin/master[m[1;33m, [m[1;31morigin/HEAD[m[1;33m)[m solve 636 using stack
* [1;33m9f4e3c0[m add testcases for 636
* [1;33mf895c71[m solve 342 using bit manipulation and math
* [1;33mcf24150[m add bit solution to 342
* [1;33m09f66a3[m solve 342 using bit manipulation
* [1;33m0331b01[m solve 342 using precomputing
* [1;33m8228ab1[m add 342 to bit category
* [1;33mb3de780[m solve 342 using loops
* [1;33mb502890[m add 19 to linked list category
* [1;33me20c05a[m solve 19 using two pointers with n+1 gap
* [1;33m80b6460[m solve 19 by reverse the list
* [1;33m8057c26[m add 143 to linked list category
* [1;33mf0983cc[m make ConstructFromSlice cleaner
* [1;33m75f3a81[m solve 143 using two pointers
* [1;33m8568315[m add ReverseList func
* [1;33m297b263[m use dummy node instead
* [1;33m4c3e6ef[m add testcases for 143
* [1;33m50839be[m solve 445 use array, without modify the original list
* [1;33mef657b7[m add 445 to linked list category
* [1;33m731ce77[m solve 445 by reverse the list
* [1;33mf08ed05[m add testcases for 445
* [1;33m1430efd[m solve 147 by a faster insertion sort
* [1;33mf3c85a7[m add 147 to linked list category
* [1;33m2dcd8e0[m fix: panic when fast is nil
* [1;33me0f242d[m solve 147 using insertion sort
* [1;33mc8426bc[m add 328 to linked list category
* [1;33ma6d14f7[m solve 328 using dummy head
* [1;33m5a019a5[m add testcases for 328
* [1;33m13d24b4[m add 234 to linked list category
* [1;33m94da054[m solve 234 using two pointers
* [1;33m4180fcc[m add 24 to list node category:
* [1;33m22ab32b[m solve 24 by swaping the nodes
* [1;33m21f9a55[m format table padding
* [1;33mcee1922[m add 141 to linked list category
* [1;33mecf9580[m solve 141 using two pointers
* [1;33m3c1ef60[m add testcases for 141
* [1;33m30a675c[m add 138 to linked list
* [1;33ma9ee587[m solve 138 in O(1) space by extend the original list
* [1;33m16c817d[m add testcases for 138
* [1;33mf709dae[m add 23 to linked list
* [1;33m67c014a[m solve 26 using brute force
*   [1;33m08ee1ec[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[32m|[m[33m\[m  
[32m|[m * [1;33m78d2b5c[m fix: style
[32m|[m * [1;33m12c81d0[m add 719 to sliding window
[32m|[m * [1;33m38da5e8[m fix: typo
[32m|[m * [1;33ma67c16d[m add 719 to array category
[32m|[m * [1;33mfbe5760[m fix: go test failed
[32m|[m * [1;33ma6b1b4a[m fix: wrong path
[32m|[m * [1;33m0ebe3ab[m rename 21 merge two sorted lists
[32m|[m * [1;33m7ab2b00[m change utils' import path to lowercase
[32m|[m * [1;33m357e34a[m  update readme
* [33m|[m [1;33mff784e0[m add testcases for 26
[33m|[m[33m/[m  
* [1;33m618f1c4[m solve 92 using dummy head
* [1;33mcbb3da5[m add testcases for 92
* [1;33m99df085[m sovle 148 using bottom-up merge sort
* [1;33me9fa43c[m add testcases for 148
* [1;33m23494c2[m implement trie using tenary search trie
* [1;33mb3a3028[m add testcases for 208
* [1;33m7a6644f[m solve 2 using additional sentinal node
* [1;33mf03cf7d[m fix: clear carrier
* [1;33m74d15ca[m solve 2 using iterator
* [1;33m7156887[m add testcases for 2
* [1;33m71c5056[m solve 64 using dp with less space
* [1;33md2fa42a[m solve 64 using dp
* [1;33m2ab4471[m add testcases for 64
* [1;33m6be1a27[m solve 1328 by checking half the string
* [1;33m23e4097[m solve 1328 using iterator
* [1;33m1449da1[m solve 1328 using brute force
* [1;33me4cb9f1[m add testcases for 1328
* [1;33mdd2797c[m solve 329 using dfs+memorization
* [1;33m0b0e45d[m solve 329 using dfs
* [1;33m04f67cf[m add testcases for 329
* [1;33mc969f74[m solve 417 using bfs
* [1;33m3890d36[m solve 417 using dfs
* [1;33ma6a615d[m add testcases for 417
* [1;33m001027e[m solve 130 using union find
* [1;33m930cf7b[m fix: 130's bfs implementations and testcases
* [1;33me445c5e[m solve 130 using bfs
* [1;33m6223bad[m solve 130 using dfs
* [1;33m24a8916[m add testcases for 130
* [1;33m659cdee[m solve 126 using modified bfs just save path instead of words
* [1;33m73aff5c[m solve 103 using simplified bfs
* [1;33m4404165[m fix: flip zag at the end
* [1;33m9036c8b[m sovle 103 using bfs
* [1;33ma1b5869[m solve 434 using strings.FieldsFunc
* [1;33m516e527[m skip the visited node
* [1;33m7e76bb6[m solve 433 using bfs
* [1;33m38ac217[m add testcases for 433
* [1;33m0fe477e[m add some comments
* [1;33m03d5d03[m faster bfs version solve 127
* [1;33m5724633[m solve 127 using bfs
* [1;33mba5f22b[m add testcases for 127
* [1;33ma384c16[m solve 539 using bucket sort
* [1;33m4cd6a08[m solve 539 using a more straight way
* [1;33m2bef852[m solve 539 use iterator
* [1;33m8cf2d9e[m add testcases for 539
* [1;33m289c2df[m solve 1325 using recursion
* [1;33m0dad642[m add testcases for 1325
* [1;33m03e3d13[m solve 463 using iteration by couting edges
* [1;33m14663db[m solve 463 using equation sizeOfIsland*4 - neighbors*2
* [1;33m46e9329[m add testcases for 463
* [1;33m3641cca[m solve 695 using bfs
* [1;33m8a46fe2[m solve 695 using union find
* [1;33m73b483f[m fix: no need to update when roots are same
* [1;33m1b139c7[m feat: add weighted quick union with path compression
* [1;33mdb816fc[m doc: worst case time complexity for quickfind, quickunion and weightedquickunion
* [1;33mba5ecf5[m doc: add some comments to quickfind and quickunion
* [1;33m5fbd849[m feat: add union find implementation
* [1;33m8c35739[m solve 695 using dfs
* [1;33m15df9f5[m add testcases for 695
* [1;33mcef1012[m solve 59 using simulation
* [1;33mf8b8233[m add testcases for 59
* [1;33m4d2e999[m solve 54 based on dicussion
* [1;33md726585[m add testcases for 54
* [1;33m22979b7[m based on discussion, space optimized
* [1;33me87fb8d[m refactor: clean code
* [1;33m5ce39e8[m solve 289 using bruteforce
* [1;33mc30a289[m add testcases for 289
* [1;33mbe3b197[m solve 561 using count sort
* [1;33m0a6f9c1[m fix: solve 561 using sort
* [1;33me90b793[m solve 42 using dp
* [1;33m4a6c85d[m brute force version
* [1;33mc29ed2a[m solve using hashmap and prefixSum
* [1;33m09a1e8e[m solve 523 using bruteforce
* [1;33mcb14ea5[m add testcases for 523
* [1;33m4796152[m fix: simpler version
* [1;33ma3499ec[m fix: brute force version
* [1;33m603724c[m fix: solve 325 using prefix sum and hash map
* [1;33m3170b20[m add testcases for 325
* [1;33m95908ac[m fix: mine works
* [1;33ma47afde[m use two pointers, but mine failed testcase2
* [1;33m3403b29[m fix: not finished
* [1;33m02e4b8c[m fix: solve 1099
* [1;33m8625f5b[m solve 259 use the same idea as 611
* [1;33m4646332[m solve 259 using brute force
* [1;33m6ab73ac[m iterator form the begin
* [1;33me2b0a33[m brilliant idea
* [1;33me0e83cf[m solve based on discussion useing binary search
* [1;33m3d024ed[m brute force
* [1;33me59c7b3[m add testcases for 611
* [1;33mdb30ddf[m fix: add brute force version with presum
* [1;33m6a20723[m doc: add comments
* [1;33m2226211[m two iterator
* [1;33m4e6316b[m fix: solve 1031 based on discussion
* [1;33m41a8291[m feat: add test cases for 1031
* [1;33m73d1c96[m fix: using slice instead
* [1;33mf775f43[m fix: call Pop instead of stack.Pop
* [1;33mda0cf79[m feat: add testcases for 716
* [1;33me1844d7[m fix: typo
* [1;33m5e67e6a[m fix: add Remove func and some comments:
*   [1;33m0998265[m fix: fix conflicts
[34m|[m[35m\[m  
[34m|[m * [1;33m71c4c77[m fix: add log to debug
* [35m|[m [1;33ma5d4081[m fix: make it pass
[35m|[m[35m/[m  
* [1;33m5bd2e84[m feat: not finished
* [1;33m7877744[m feat: solve 380 use map and slice
* [1;33mf8607c1[m feat: solve 1286 using bit mask
* [1;33mff72331[m fix: solve 1239 using backtracking
* [1;33m563e429[m feat: solve 1239 using dfs
* [1;33m31b79fd[m fix: solve 1239 based on discussion
* [1;33md193289[m feat: add numOfOnes func
* [1;33m7c81b73[m feat: add testcases for 1239
* [1;33m06141b1[m fix: distance is in [0,2000) range
* [1;33mef5c3f4[m fix: typo
* [1;33m99764c2[m feat: use bucket sort based on discussion
* [1;33m69e02b7[m fix: solve 1057 using priority queue
* [1;33m02f006a[m feat: add tuple priority queue
* [1;33m078d931[m feat: add testcases for 1057
* [1;33m31d9984[m refactor: ignore some states by check the numOfOnes in the state
* [1;33mdf9a2af[m doc: add some comments
* [1;33mc3b8c9d[m fix: try to solve use dp
* [1;33me03df36[m fix: solve using dfs
* [1;33md214121[m feat: add testcases for 1066
* [1;33ma30af07[m feat: add bfs version
* [1;33md891cf2[m fix: use dfs based on discussion
* [1;33m720a9bb[m feat: use brute force got tle
* [1;33md9b64da[m feat: add testcases for 1215
* [1;33me5cdfa1[m fix: solve 425 using TernarySearchTrie and backtracking
* [1;33m67ffe5c[m feat: ternary search trie add WithPrefix func
* [1;33m36ac473[m feat: add testcase for 425
* [1;33m08b553d[m doc: add some comments for better understanding
* [1;33mf01cb17[m fix: a better backtracking just counting
* [1;33me24369a[m fix: solve 1079
* [1;33m5b89f7e[m feat: add testcases for 1079
* [1;33mf649475[m fix: gofmt
* [1;33md336c77[m feat: solve 784
* [1;33m7abacb7[m fix: solve 291 based on discusstion, still the time complexity is unkown
* [1;33m6b9ef59[m feat: add testcases for 291
* [1;33mbee0f21[m doc: add a comment
* [1;33m983ae40[m fix: solve 980 using dfs+backtrakcing
* [1;33mc7156d0[m feat: add testcases
* [1;33m5991d86[m fix: remove unused file
* [1;33mcdda0c4[m doc: add some comments
* [1;33mb787f92[m feat: solve 464 based on disucssion
* [1;33m1fe3c3e[m add testcases for 464
* [1;33ma023fc6[m feat: solve 486 using dp
* [1;33me98df05[m feat: solve 486 using maxmin with cache
* [1;33mb9e3f80[m feat: solve 486 using maxmin algorithm
* [1;33mbd2c564[m feat: solve 712 using dp
* [1;33m60cddb1[m doc: add some comments
* [1;33m110347c[m fix: solve lcs using dp
* [1;33mc294cd2[m fix: wrong solution:
* [1;33m1e5e2fe[m doc: add some comments
* [1;33m28909bf[m fix: solve 583 using dp
* [1;33m652ac1b[m fix: remove unsued file
* [1;33mad68d4d[m fix: solve 161 using iteration
* [1;33mb73f799[m fix: solve 161 using dp
* [1;33mba77d27[m fix: new dp less space complexity
* [1;33m52b5e37[m fix: add time and space complexity
* [1;33mc641233[m fix: solve 72 using dp with comments
* [1;33m7540bfc[m add testcases for 72
* [1;33m4f5a176[m doc: add some comments
* [1;33mcb06b51[m fix: solve using dp
* [1;33m71b163e[m fix slice boundary panic
* [1;33md38a1c6[m not finished yet
* [1;33m1bddb4c[m got tle
* [1;33m460a423[m use rway trie
* [1;33m751e5ca[m implement R-Way-Trie
* [1;33meeec79b[m fix: fix some jump logic
* [1;33m0abb2fa[m solve 212 using trie
* [1;33m8a34f37[m fix: ternary search trie is not a R-way trie, root is not empty
* [1;33ma6e238f[m make root exported
* [1;33md5009ef[m make TST fields exported
* [1;33m100355a[m add more test cases for longestPrefixOf
* [1;33md46cc71[m implement LongestPrefixOf
* [1;33m75d069c[m remove unused log
* [1;33m36f3f3f[m implement ternary search trie
*   [1;33m3e041df[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[36m|[m[1;31m\[m  
[36m|[m * [1;33mcbc1e3a[m fix some logic
[36m|[m * [1;33maba497d[m not finished yet
[36m|[m * [1;33mdd9b210[m add test cases for 140
* [1;31m|[m [1;33m293bb0c[m use backtrack
[1;31m|[m[1;31m/[m  
* [1;33m8f3dfd7[m sovle 139 using dp
* [1;33m67da796[m solve 139 use bfs
* [1;33md9e9272[m solve 139 based on solution using dfs+memorization
* [1;33m64f3834[m tle for some cases
* [1;33m9a9e4c0[m optimize with memorization
* [1;33ma23dd59[m sovled based on solution
* [1;33m476a8bf[m add testcases
* [1;33m38dc5a6[m precompute the result dp
* [1;33m9121108[m sovle 1137 using iteration, time complexity O(N)
* [1;33mf37cafb[m add time and space complexity for matix
* [1;33m4fc77e1[m solved based on solution 5
* [1;33m34752b5[m sovle 509 by iteration
* [1;33m504687d[m solve 842 based on addtive numbers
* [1;33m58c1685[m not yet
* [1;33mcc0e58c[m solved based on discussion
* [1;33m35a69ec[m with detailed testcases
* [1;33mf7d10b4[m add testcases
* [1;33m9c754b8[m add iterator version based on disuccsion
* [1;33m2598f16[m solve 93 use backtracking
* [1;33md2396f4[m add testcases
* [1;33mda6c0cb[m solve 357 use backtrackinig
* [1;33m2941010[m solve 357 based on disscussion
* [1;33m4d45597[m add testcases for 357
* [1;33m735eeae[m rm .swp
* [1;33m64b97f0[m solve sudoku
* [1;33m2fb775a[m not finished
* [1;33mc16f0d4[m add testcase
* [1;33m6825437[m solved 89 based on dicussion
* [1;33m1cf1a07[m add Pow func
* [1;33md0ad84d[m add comment
* [1;33m8797af0[m solve 60 based on discussion
* [1;33m29eaf4f[m user netxtPermutation to generate the kth permute
* [1;33m13827bf[m add testcases
* [1;33m6c53e76[m add isPalindromeWithBoundary
* [1;33m6d481bf[m solve 131 based on discussion
* [1;33m4d1cbda[m add testcase for 131
* [1;33m93f626e[m use backtracking to solve 52
* [1;33mc27ffe9[m solve nqueues use backtracking
* [1;33m91d161e[m add testcases for 51
* [1;33m22d87d0[m rename
* [1;33mb13cd45[m use backtracking to solve 17
* [1;33mbaeb837[m use backtracking to solve 22
* [1;33m2519aa7[m solve 77 use backtracking
* [1;33mb8483bd[m no need to check n < 0
* [1;33mff4eb6f[m fix golang slice reference error
* [1;33m3a91a85[m using backtracking to solve 47
* [1;33mb0e157c[m not finished:
* [1;33m7be6f32[m use back tracking to solve 267
* [1;33me011013[m init commit
* [1;33ma3fe60e[m solve 264 using priority queue
* [1;33m804ce9b[m implement int64PriorityQueue and add some tests
* [1;33m1a45d7f[m solve 23 using divide and conquer
* [1;33mb29043e[m solve 23 using priority queue
* [1;33mb178ec9[m add test for listnode priority queue
* [1;33m720d232[m add listnode priority queue
*   [1;33m5467b77[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[1;32m|[m[1;33m\[m  
[1;32m|[m * [1;33m78866a8[m add time and space complexity
* [1;33m|[m [1;33m6da5c80[m minor change
[1;33m|[m[1;33m/[m  
* [1;33ma5e25e8[m solve 23 by comparing one by one
* [1;33m1f60bc7[m solve 23 using brute force
* [1;33m6e8e296[m add IsEqualList helper function for ListNode
* [1;33m66a9ba7[m solve 24
* [1;33mf17468d[m solve 700
* [1;33m91fcfc6[m without using recursion
* [1;33mf7ba933[m utils add IsEqual and related tests
* [1;33m13ad632[m solve 701 use recursion
* [1;33mda95b33[m solution: iteration which is brilliant
* [1;33mb94d7bb[m solve 230 use inorder traversal
* [1;33me9a17db[m add testcases for 230
* [1;33m8fe4cfb[m fix failed test:
* [1;33mf9c0213[m fix duplicates edge
* [1;33ma9c3374[m partially done
* [1;33m019aaa8[m init
* [1;33m28dbfeb[m solve 210 using kahn's algorithm
* [1;33ma883c31[m toplogical sort
* [1;33ma957917[m use stack to solve 496
* [1;33m29d538b[m finanlly fix it
* [1;33m0dfe15c[m partial
* [1;33m97e8cd4[m init 559
* [1;33mc1def1c[m module n without expend array
* [1;33m8efdb49[m solve 503 use stack
* [1;33mae595f7[m use stack
* [1;33m4691aa6[m remove unused else
* [1;33m552a564[m solve 1019 based on dp
* [1;33m7410d12[m use two pointers
* [1;33mfd7a94d[m frute force
* [1;33m1c0ff1c[m use slidewindow
* [1;33m2026d9a[m use []int instead
* [1;33m19b6dd9[m use hashmap
* [1;33m8f28941[m use two helper array to store block's max value
* [1;33me7991df[m just brute force
* [1;33m1f449ac[m simplified dfs
* [1;33mb73cbe2[m solved based on lee215's contest
* [1;33m0751d97[m sovled based on discussion
* [1;33m49b8453[m delete swap file
* [1;33m4ea3b0e[m init commit
* [1;33m7c1d229[m solved based on discussion https://leetcode.com/problems/subarrays-with-k-different-integers/discuss/234482/JavaC%2B%2BPython-Sliding-Window-atMost(K)-atMost(K-1)
* [1;33m9450559[m solve 340 using slide window
* [1;33m45a331f[m use slide window algorithm
* [1;33meafb56c[m sovled based on slide window
* [1;33m1214620[m iterative vesion
* [1;33mc4b527a[m accepted version:
* [1;33m4167599[m fix
* [1;33m509a834[m init version based on solution use stack and reverse string
* [1;33m1c9710d[m fix over flow
* [1;33m2b83cab[m dp based on solution need figure out why (M-dp[i-4]) % M instead - (dp[i-4])%M
* [1;33m7e55107[m recursive formula based on solution
* [1;33mccfd98f[m first approach use brute force generate all the substrings of n then check and count
* [1;33m7e8f3d8[m based on discussion, need time to figure out why
* [1;33m0b800e3[m first submit failed, need to dig more
* [1;33m6d7e2fb[m solve 227 based on discussion
* [1;33m3c8258f[m 227 use 1 stack
*   [1;33m96e6f64[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[1;34m|[m[1;35m\[m  
[1;34m|[m *   [1;33m746af8e[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[1;34m|[m [1;36m|[m[31m\[m  
[1;34m|[m * [31m|[m [1;33m9cea1b5[m local
* [31m|[m [31m|[m [1;33m2910bcf[m solved use two stacks
* [31m|[m [31m|[m [1;33mdeca49a[m 227 testcase ready
[31m|[m [31m|[m[31m/[m  
[31m|[m[31m/[m[31m|[m   
* [31m|[m [1;33m51b5930[m solve 529 use DFS
* [31m|[m [1;33m1149dac[m do not use global vars
* [31m|[m [1;33m0ae37b7[m solve 591
* [31m|[m [1;33mbd53a96[m modify something
* [31m|[m [1;33m585ac5a[m solve 986
* [31m|[m [1;33me678e12[m solve 465 based on discussion
* [31m|[m [1;33mbdf4fd8[m utils.stringheap
* [31m|[m [1;33md11d4f8[m sovle 332 based on discussion
* [31m|[m [1;33m383920c[m solve 347
* [31m|[m [1;33m817b04f[m using bucket to count
* [31m|[m [1;33m97eb8b1[m solve 47 using old school way
* [31m|[m [1;33m04b298f[m add brute force and optimized version
* [31m|[m [1;33m38cbb7f[m longest substring witihout repeating character
[31m|[m[31m/[m  
* [1;33m9aa22ec[m using golang's built in functions
* [1;33m67af5fe[m bfs version
* [1;33m93c108f[m add some comments
* [1;33m491b107[m dfs version
* [1;33m00c0f8b[m dfs version
* [1;33m630672d[m using two stacks
* [1;33mcca8fee[m remove some unused code
* [1;33m81ab59c[m dfs and bfs version of the maze ii
* [1;33m639f8a1[m bfs version
* [1;33m0480987[m dfs version
* [1;33ma9baea3[m some comments to make sense
* [1;33ma8e74c0[m dp version
* [1;33m2b3f586[m burst balloons
* [1;33m23719f2[m bottom up
* [1;33m3c6c702[m more comments
* [1;33m77614ac[m modification
* [1;33m7c8f2e7[m mermorization dfs
* [1;33mc2112b1[m two dps
* [1;33m275592f[m memorized backtracking
* [1;33m485cd2a[m use morris traversal  to implement preorder, inorder and postorder traversal
* [1;33ma31771f[m simplified version
* [1;33mfa02a50[m morris inorder traversal
* [1;33m8596375[m update comments
* [1;33m3725f10[m modified version
* [1;33mb623107[m in order  traverse
* [1;33m33de259[m 01 matrix
* [1;33m1d8d1d8[m bfs
* [1;33m233e99f[m dfs version
* [1;33mbae36eb[m union-find version
* [1;33m7090365[m num of distinct islands
* [1;33mee2c805[m bfs version
* [1;33ma3a1fb9[m dfs
* [1;33mebf9473[m weighted union-find with path compression
* [1;33m32ae75a[m simplified version
* [1;33m990a853[m number of islands ii using union find
* [1;33m5b22cfc[m bfs and dfs soluctions for walls and gates
* [1;33m4b179d7[m union find to solve number of islands
* [1;33mb1bde76[m optimized version of weighted quick-union with path compression
* [1;33mdbcbd4b[m different version of union finds
* [1;33m2c0d739[m union find(quick find not efficent)
* [1;33m0b9f1a1[m dfs for firends circle
* [1;33mab63c54[m number of islands
* [1;33m4dbe445[m largest value in each tree row
* [1;33mdc811d8[m flatten binary tree to linked tlist
* [1;33m4c222ff[m right side view
* [1;33m9d5ea3f[m level order travesal
* [1;33m636b308[m house rob
* [1;33m3e4d4cd[m remove invalid parentheses
* [1;33m0009db7[m max path sum
* [1;33m0583026[m add comments
* [1;33m4293e5a[m path sum ii
* [1;33m913d479[m fix
* [1;33mc875c45[m sum root to leaf numbsers
* [1;33me790766[m is valid bst
* [1;33m4b758fc[m sorted list to bst
* [1;33mcdcbbf9[m construct tree from lever order travesal
* [1;33mcd45ca3[m fix
* [1;33m6e2da8e[m find leavs of binary tree
* [1;33m059fd71[m find kth smallest pair distance
* [1;33m89849bf[m best time to buy and sell stock IV
* [1;33m3fb7fb3[m best time to buy and sell stock iii
* [1;33mcc3eda7[m maximum sum of 3 subarrays
* [1;33m6b94e9d[m 689's test cases
* [1;33m01a8497[m median of the two sorted array
* [1;33me0924fa[m no more allocation
* [1;33m14063df[m insert interval
* [1;33m99075b1[m optimized version use bfs to construct the neighborsMap and distanceMap use dfs to get the result
* [1;33m7e1ce0f[m tle, need to optimize
* [1;33m023f517[m jump game
* [1;33mf6c1c50[m trapping rain water
* [1;33m9416353[m first missing positive
* [1;33mb979863[m optimized version of brute foce
* [1;33m8c4bc35[m longest consecutive sequece
* [1;33m99aa632[m largest rectangle in historgram
* [1;33m05f8595[m largest matrix
* [1;33mc391fbd[m find minimum in rotated sorted array
* [1;33me6d5e35[m my calendar i
* [1;33m5dea524[m longest common sequence
* [1;33me271288[m rearrange string k distance apart
* [1;33m9f08291[m typo
* [1;33md661042[m task scheduler
* [1;33m053e8e7[m rotated array search ii
* [1;33mdf50c1c[m search for a range
* [1;33mef901c6[m combination sum II
* [1;33m50ad9e8[m minium size subarray sum
* [1;33m91e7eb0[m sombination sum III
* [1;33m025ef1f[m simplify
* [1;33m436482d[m subarray sums equals  k
* [1;33mbcbac27[m subsets ii
* [1;33mad7e854[m subsets
* [1;33m8b6b682[m find all duplicates in a n array
* [1;33mae30a8c[m combination sum
* [1;33m0c4593b[m peak element
* [1;33m0bb668d[m permutations
* [1;33m3ad56d8[m next permutation
* [1;33m1ca43ce[m word search
* [1;33m218dc34[m three sum closest
* [1;33md9c45f8[m majority elements
* [1;33m8e1ae3f[m find the duplicates
* [1;33m5753c4e[m range summary
* [1;33m144c16d[m rotate image
* [1;33mfc48be8[m two more intresting solutions for meeting rooms
* [1;33me8ee697[m meeting rooms ii
* [1;33ma3850fc[m merge intervals
* [1;33m44de7f6[m search in the rotated sorted array
* [1;33m9798b29[m finding minimum in rotated sorted array
* [1;33m1baf89e[m product of array except self
* [1;33m46d6ecb[m container with most water
* [1;33m43b72d2[m regular expression
* [1;33m0216ba3[m brute force
* [1;33m4e758b4[m unique substrings in wraparound
* [1;33m02c1980[m minimal delete ascii sum
* [1;33m6a63e21[m query test
* [1;33ma676f6a[m with comments
* [1;33m2364514[m 2 keys keyboard
* [1;33m4af7903[m 4 keys keyboard
* [1;33m2bc6040[m bomb kill
* [1;33m520678b[m longest word in dictionary
* [1;33m5b80d39[m rolling hash
* [1;33m8f771a5[m maximum length of repeated subarray
* [1;33m2320193[m no need to handle nums[i] <= nums[j]
* [1;33m8b8688e[m number of longest increasing sequences
* [1;33m1247f31[m best time to buy and sell stock with transaction fee
* [1;33m7758978[m is subsequence
* [1;33m9dee5c9[m wiggle sequence
* [1;33m792e134[m partition to k equal sum subsets
* [1;33m8f37c64[m combination sum iv
* [1;33m1f157cb[m arithmetic slices
* [1;33m85fcdfe[m equal subset sum
* [1;33md6c2594[m some comments
* [1;33m6774d55[m target sum
* [1;33m10be774[m longest palindromic subsequence
* [1;33me8ba5db[m house robber ii
* [1;33m84542ec[m rob2
* [1;33m6c3d007[m more tests and fix some bugs
* [1;33m790b314[m manacher's algorithm
* [1;33maf9ef6e[m try to implement it in O(n) time
* [1;33m1e10631[m longest palindromic substring
* [1;33m84e7d46[m palindromic substrings
* [1;33mb66745f[m maximal square
* [1;33mf162e47[m integer break
* [1;33mb6ba983[m unique path ii
* [1;33m0aa9366[m unique path
* [1;33m3384958[m decode ways
* [1;33m9b63165[m ugly number ii
* [1;33ma736210[m ugly number
* [1;33md5bba72[m add comments and O(1) space algorithm
* [1;33mc2ebca8[m best time to buy and sell stocks with cooldown
* [1;33mc29fa25[m coin change
* [1;33mb1127b7[m using utils.Max instead
* [1;33meefcea4[m perfect squares
* [1;33m56f6fd8[m counting bits
* [1;33ma15355b[m max sum of contious subarray
* [1;33m9418ef6[m set mismatch
* [1;33m1709db1[m sum of square numbers
* [1;33mdc7f6fd[m simple dp solution
* [1;33m790f856[m max product subarray
* [1;33m9d150ec[m max product of three numbers
* [1;33mfc9cbc8[m some modifications
* [1;33mae01d5e[m max average subarray ii
* [1;33m7a408a9[m max average subarray 1
* [1;33m2971551[m repeated string match
* [1;33m4393cc8[m longest increasing subsequence
* [1;33m94bf6d7[m longest continuous increasing subsequence
* [1;33mffec225[m simple modification
* [1;33m19aabc4[m binary number with alternating bits
* [1;33m112efe6[m strobogrammatic number ii
* [1;33m27c3653[m strogoprogrammatic number
* [1;33m4d3be53[m max consecutive ones ii
* [1;33mc3b7b7d[m max consecutive ones
* [1;33md9b5702[m reverse words in a string
* [1;33m79b6def[m minium moves to equal array elements
* [1;33mb0360fb[m merge sorted array
* [1;33m8163d1d[m with out modifacation
* [1;33m9ef6b68[m non decresing array
*   [1;33maa8f29e[m fix merge conflict
[32m|[m[33m\[m  
[32m|[m * [1;33m887423d[m Create max_test.go
[32m|[m * [1;33m15d3121[m Create max.go
* [33m|[m [1;33ma8afb57[m largest palindrome product
[33m|[m[33m/[m  
* [1;33m431cd33[m find all numbers disappeared in an array
* [1;33m976afee[m find all anagrams in a string
* [1;33m5b6be2c[m student attendance record i
* [1;33m91d2d95[m no need to return
* [1;33m54bdeea[m add strings
* [1;33mf9e463f[m third max
* [1;33m5197394[m my version with better code
* [1;33m6ed36d3[m correct
* [1;33ma7e1a1e[m longest palindrome
* [1;33md75a994[m flip game
* [1;33m12a37e1[m word pattern
* [1;33m890a6bb[m move zeroes
* [1;33m5f5c031[m palindrome permutation
* [1;33m5ec36f9[m add digits
* [1;33m0c9fafc[m meeting rooms
* [1;33m9cdd0b6[m shortest word distance
* [1;33m7800d9c[m valid anagram
* [1;33m3922777[m logger rate limiter
* [1;33m0e8316d[m perfect squre number
* [1;33m844ef7d[m typo
* [1;33mb1d2b6c[m reverse string
* [1;33m10ba2e9[m valid palindrome ii
* [1;33m1e8add6[m missing number
* [1;33mfefd614[m palindrome linked list
* [1;33ma7aa62f[m * utils add stack * invert a binary tree
* [1;33m1234e7b[m power of three
* [1;33m3f41daa[m power of two
* [1;33m874a010[m contains duplicate ii
* [1;33m1c849bd[m contain duplicate
* [1;33mf4d5faf[m reverse linked list and add utils package
* [1;33mcca2dea[m isomorphic strings
* [1;33md65acbb[m remove linked list elements
* [1;33m5ccb27c[m count primes
* [1;33m2629538[m happy number
* [1;33m4012bb7[m first unique character in a string
* [1;33m8a43cc0[m hamming distance and find difference in string
* [1;33m7dc9802[m intersection of two arrays ii
*   [1;33m28718d4[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[34m|[m[35m\[m  
[34m|[m * [1;33me268113[m maximum length of pair chain
[34m|[m *   [1;33m643a995[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[34m|[m [36m|[m[1;31m\[m  
[34m|[m * [1;31m\[m   [1;33me96382b[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[34m|[m [1;32m|[m[1;33m\[m [1;31m\[m  
[34m|[m * [1;33m\[m [1;31m\[m   [1;33mf5920b7[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[34m|[m [1;34m|[m[1;35m\[m [1;33m\[m [1;31m\[m  
[34m|[m * [1;35m\[m [1;33m\[m [1;31m\[m   [1;33m6951351[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[34m|[m [1;36m|[m[31m\[m [1;35m\[m [1;33m\[m [1;31m\[m  
[34m|[m * [31m\[m [1;35m\[m [1;33m\[m [1;31m\[m   [1;33m4b41dbc[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[34m|[m [32m|[m[33m\[m [31m\[m [1;35m\[m [1;33m\[m [1;31m\[m  
[34m|[m * [33m|[m [31m|[m [1;35m|[m [1;33m|[m [1;31m|[m [1;33mdf81e97[m roman
[34m|[m  [33m/[m [31m/[m [1;35m/[m [1;33m/[m [1;31m/[m  
* [33m|[m [31m|[m [1;35m|[m [1;33m|[m [1;31m|[m [1;33mb9709fa[m intersection of two arrays
[1;31m|[m [33m|[m[1;31m_[m[31m|[m[1;31m_[m[1;35m|[m[1;31m_[m[1;33m|[m[1;31m/[m  
[1;31m|[m[1;31m/[m[33m|[m [31m|[m [1;35m|[m [1;33m|[m   
* [33m|[m [31m|[m [1;35m|[m [1;33m|[m [1;33m0627621[m range sum query
[1;33m|[m [33m|[m[1;33m_[m[31m|[m[1;33m_[m[1;35m|[m[1;33m/[m  
[1;33m|[m[1;33m/[m[33m|[m [31m|[m [1;35m|[m   
* [33m|[m [31m|[m [1;35m|[m [1;33m56913ad[m paint fence
* [33m|[m [31m|[m [1;35m|[m [1;33me5b7e08[m paint house
* [33m|[m [31m|[m [1;35m|[m [1;33mc2212a3[m best sell
* [33m|[m [31m|[m [1;35m|[m [1;33m865404d[m no need additional slice
* [33m|[m [31m|[m [1;35m|[m [1;33mb498da8[m house robber
[1;35m|[m [33m|[m[1;35m_[m[31m|[m[1;35m/[m  
[1;35m|[m[1;35m/[m[33m|[m [31m|[m   
* [33m|[m [31m|[m [1;33m0578207[m number of coins
* [33m|[m [31m|[m [1;33mbd343d5[m reverse bits
[31m|[m [33m|[m[31m/[m  
[31m|[m[31m/[m[33m|[m   
* [33m|[m [1;33mc3abd8e[m roate array
* [33m|[m [1;33m86e9806[m excel column number
* [33m|[m [1;33m160a9ff[m majority element
* [33m|[m [1;33m8f407bb[m excel sheet column ttile
* [33m|[m [1;33m5d8b097[m intersection of two linked list
* [33m|[m [1;33mb8d150b[m store the gaps in the stack
* [33m|[m [1;33m0c7c551[m min stack
* [33m|[m [1;33m413265a[m valid palindrome
* [33m|[m [1;33m93834f8[m 119 pascal triangle ii
* [33m|[m [1;33m919c005[m 118 pascal triangle
* [33m|[m [1;33m5efc5b7[m 112 path sum
* [33m|[m [1;33m4ffef09[m 111 minimum depth of bianry tree
[33m|[m[33m/[m  
* [1;33m9a99788[m 110 balanced binary tree
* [1;33m5dc927b[m 108 convert sorted array to binary search tree
* [1;33m705a30d[m binary tree level order travesal II
* [1;33mb8b3409[m add binary
* [1;33mb636c3e[m plus one
* [1;33m2a9f0b0[m sub testing
* [1;33m5b253e3[m search insert position
* [1;33m8d0cba9[m strstr
* [1;33m2d19bad[m remove_element
* [1;33m8beab97[m simplify
*   [1;33meb1d230[m Merge branch 'master' of github.com:Catorpilor/LeetCode
[34m|[m[35m\[m  
[34m|[m * [1;33m242ba8f[m modified add_two_numbers
[34m|[m * [1;33mfa3331c[m Decode ways solution
[34m|[m * [1;33me91dedf[m Not my solution. But i got it...haha
[34m|[m * [1;33me4dfce3[m adding Maximum_Subarray
[34m|[m * [1;33md7dc78c[m Solving the problem using DP.Bottom-up strategy
[34m|[m * [1;33mb40a745[m Another update.Using less Space
[34m|[m * [1;33m7235794[m adding an amazing solution
[34m|[m * [1;33m5f0e19b[m Unique paths ii
[34m|[m * [1;33m7ca1019[m unique path
[34m|[m * [1;33mc60ac82[m add two numbers
[34m|[m * [1;33mcfe0d00[m adding 4sum
[34m|[m * [1;33mdc63897[m modified markdown
[34m|[m * [1;33mff5babd[m 3 sum
[34m|[m * [1;33mb11a1af[m adding word break
[34m|[m * [1;33m55b9f4d[m adding triangle
[34m|[m * [1;33mae3e7e0[m add sell stock iii
[34m|[m * [1;33mb1a250e[m sell stock i
[34m|[m * [1;33m9397820[m Linked list ii
[34m|[m * [1;33mf765c27[m adding Linked list cycle
[34m|[m * [1;33m40ddac7[m linklist remove duplicates
[34m|[m * [1;33m117d76e[m remove dupilicats from sorted array
[34m|[m * [1;33md952db6[m adding binary_tree_level_traversal
[34m|[m * [1;33m3d9d070[m another change
[34m|[m * [1;33m9804a38[m modified the unique.md
[34m|[m * [1;33m440de7a[m unique binary trees
[34m|[m * [1;33m984eec8[m adding binary-tree-traversal &  minimum-depth-of-tree & climbing stairs solution
[34m|[m * [1;33m7d19e2b[m Pascal's and populating solutions
[34m|[m * [1;33mf01a16a[m Construct binary tree from preorder and inorder traversal solution
[34m|[m * [1;33m81e928e[m update README.md
[34m|[m *   [1;33m9edd8ea[m Merge branch 'master' of https://github.com/Catorpilor/LeetCode
[34m|[m [36m|[m[1;31m\[m  
[34m|[m [36m|[m * [1;33m39d0e76[m Initial commit
[34m|[m * [1;33m1d826d0[m my init commit
* [1;33mf28c981[m 3 problems
